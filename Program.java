/*
   Создать наследника реализованного класса ГорячийНапиток с дополнительным полем int температура.
Создать класс ГорячихНапитковАвтомат реализующий 
интерфейс ТорговыйАвтомат и реализовать перегруженный метод getProduct(int name, int volume, int temperature), 
выдающий продукт соответствующий имени, объёму и температуре.
В main проинициализировать несколько ГорячихНапитков и ГорячихНапитковАвтомат и воспроизвести логику, 
заложенную в программе.
Всё вышеуказанное создать согласно принципам ООП, пройденным на семинаре.
 */

/*Домашнее задание
Создать наследника класса Продукта - ГорячийНапиток с дополнительным полем int температура.
Создать класс ГорячихНапитковАвтомат реализующий интерфейс ТорговыйАвтомат и реализовать
перегруженный метод getProduct(int name, int volume, int temperature) выдающий продукт
соответствующий имени, объему и температуре
В main проинициализировать несколько ГорячихНапитков и ГорячихНапитковАвтомат и
воспроизвести логику заложенную в программе
Все вышеуказанное создать согласно принципам ООП пройдённым на семинаре */

package Dzsem1;
/*В main проинициализировать несколько ГорячихНапитков и Avtomatnapitkov и воспроизвести логику, 
заложенную в программе.*/
public class Program {
    public static void main(String[] args) {
        Hotdrink drink1 = new Hotdrink("Чай", 200, 80);
        Hotdrink drink2 = new Hotdrink("Кофе", 120, 70);
        Hotdrink drink3 = new Hotdrink("Какао", 200, 70);

        Avtomathotnapitkov avtomathotnapitkov = new Avtomathotnapitkov();
        Hotdrink product1 = avtomathotnapitkov.getProduct("Чай", 200,80);
        Hotdrink product2 = avtomathotnapitkov.getProduct("Кофе", 120,70);
        Hotdrink product3 = avtomathotnapitkov.getProduct("Какао", 200,70);

          // сюда тоже что то просится( 



    }
}

// Евгений , Добрый день! Спасибо!) 


// Чтобы реализовать метод getProduct в классе Avtomathotnapitkov, вам нужно добавить логику для выбора и выдачи продукта в зависимости от его имени, объема и температуры. Вот как это можно сделать:

// package Dzsem1;

// import java.util.ArrayList;
// import java.util.List;

// public class Avtomathotnapitkov implements Vendingmachine {
//     private List<Hotdrink> hotdrinks = new ArrayList<>();

//     public Avtomathotnapitkov() {
//         // Инициализируйте список доступных горячих напитков
//         // Это можно сделать в конструкторе или добавив методы для добавления напитков
//         hotdrinks.add(new Hotdrink("Чай", 200, 80));
//         hotdrinks.add(new Hotdrink("Кофе", 120, 70));
//         hotdrinks.add(new Hotdrink("Какао", 200, 70));
//     }

//     @Override
//     public void getProduct() {
//         // Здесь можно реализовать логику выбора и выдачи продукта
//         // Например, вы можете использовать какой-то пользовательский ввод или другую логику для выбора продукта
//         // В данном случае, я просто выбираю первый доступный напиток из списка
//         if (!hotdrinks.isEmpty()) {
//             Hotdrink product = hotdrinks.get(0);
//             System.out.println("Получен продукт: " + product.getName());
//             hotdrinks.remove(0); // Удаляем выбранный продукт из списка
//         } else {
//             System.out.println("Нет доступных продуктов.");
//         }
//     }
// }
// В этом примере я создал список hotdrinks, который содержит доступные горячие напитки, и при вызове метода getProduct(), первый доступный напиток выбирается и выводится на экран. Если доступных напитков нет, выводится сообщение об этом.

// Вы можете доработать этот метод, чтобы он соответствовал вашей логике выбора и выдачи продукта.

// Задание действительно запутанное, поэтому пишите если будут вопросы)
